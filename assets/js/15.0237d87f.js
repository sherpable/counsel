(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{211:function(t,e,s){"use strict";s.r(e);var a=s(0),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"reporting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reporting"}},[t._v("#")]),t._v(" Reporting")]),t._v(" "),s("p",[t._v("Out of the box Counsel will come with the build-in "),s("code",[t._v("DotReporter")]),t._v(". This "),s("code",[t._v("DotReporter")]),t._v(" will extend the "),s("code",[t._v("Repoter")]),t._v(" class. The reporter is responsible for rendering the test result into the terminal. The reporter is build with the intention to make it 100% customisable. You can create you own "),s("code",[t._v("MyReporter")]),t._v(" class, let it extend "),s("code",[t._v("DotRepoter")]),t._v(" or "),s("code",[t._v("Reporter")]),t._v(" and customize it.")]),t._v(" "),s("h2",{attrs:{id:"properties"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#properties"}},[t._v("#")]),t._v(" Properties")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Property")]),t._v(" "),s("th",[t._v("Type")]),t._v(" "),s("th",[t._v("Default")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("silent")]),t._v(" "),s("td",[t._v("boolean")]),t._v(" "),s("td",[t._v("false")]),t._v(" "),s("td",[t._v("When set to true the repoter won't log anything to the console.")])]),t._v(" "),s("tr",[s("td",[t._v("indentation")]),t._v(" "),s("td",[t._v("int")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("This will be the number of spaces per indentation level.")])])])]),t._v(" "),s("h2",{attrs:{id:"helpers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#helpers"}},[t._v("#")]),t._v(" Helpers")]),t._v(" "),s("p",[t._v("The helper methods are located inside the "),s("code",[t._v("Repoter")]),t._v(" class and will provide a nice API logging to the terminal.")]),t._v(" "),s("h3",{attrs:{id:"log-message"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#log-message"}},[t._v("#")]),t._v(" log(message = '')")]),t._v(" "),s("p",[t._v("Log something to the terminal with a line break before it.")]),t._v(" "),s("h3",{attrs:{id:"appendlog-message"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#appendlog-message"}},[t._v("#")]),t._v(" appendLog(message)")]),t._v(" "),s("p",[t._v("Log something to the terminal without a line break before it.")]),t._v(" "),s("h3",{attrs:{id:"indent-message-level-1-append-false"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#indent-message-level-1-append-false"}},[t._v("#")]),t._v(" indent(message, level = 1, append = false)")]),t._v(" "),s("p",[t._v("Add intentation to a message with a line break before it by default.")]),t._v(" "),s("h3",{attrs:{id:"indentappend-message-level-1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#indentappend-message-level-1"}},[t._v("#")]),t._v(" indentAppend(message, level = 1)")]),t._v(" "),s("p",[t._v("Add intentation to a message without a line break before it.")]),t._v(" "),s("h3",{attrs:{id:"addindentation-spaces-undefined"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#addindentation-spaces-undefined"}},[t._v("#")]),t._v(" addIndentation(spaces = undefined)")]),t._v(" "),s("p",[t._v("Add indentation, this is useful when you need to concatenate 2 string and add indentation between both. When spaces variable is undefined it will use the default indentation value.")]),t._v(" "),s("h3",{attrs:{id:"visualdifference-actual-expected"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#visualdifference-actual-expected"}},[t._v("#")]),t._v(" visualDifference(actual, expected)")]),t._v(" "),s("p",[t._v("Visualize the difference bewteen the actual value and expected value, like "),s("code",[t._v("git diff")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"beautify-value"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#beautify-value"}},[t._v("#")]),t._v(" beautify(value)")]),t._v(" "),s("p",[t._v("Beautify some value. Useful for code blocks or html string.")]),t._v(" "),s("h3",{attrs:{id:"visualerror-assertion-assertion"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#visualerror-assertion-assertion"}},[t._v("#")]),t._v(" visualError(Assertion assertion)")]),t._v(" "),s("p",[t._v("Visualize an assertion error.")]),t._v(" "),s("h2",{attrs:{id:"before"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#before"}},[t._v("#")]),t._v(" Before")]),t._v(" "),s("p",[t._v("Useful "),s("code",[t._v("before")]),t._v(" methods that could be overridden within you own "),s("code",[t._v("Reporter")]),t._v(" class.")]),t._v(" "),s("h3",{attrs:{id:"beforeboot"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#beforeboot"}},[t._v("#")]),t._v(" beforeBoot()")]),t._v(" "),s("h3",{attrs:{id:"beforetest"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#beforetest"}},[t._v("#")]),t._v(" beforeTest()")]),t._v(" "),s("h3",{attrs:{id:"beforeiotest"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#beforeiotest"}},[t._v("#")]),t._v(" beforeIOTest()")]),t._v(" "),s("h3",{attrs:{id:"beforeeachassertion-assertion-assertion"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#beforeeachassertion-assertion-assertion"}},[t._v("#")]),t._v(" beforeEachAssertion(Assertion assertion)")]),t._v(" "),s("h3",{attrs:{id:"beforeeachtest-test-test"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#beforeeachtest-test-test"}},[t._v("#")]),t._v(" beforeEachTest(Test test)")]),t._v(" "),s("h3",{attrs:{id:"beforeeachiotest-iotest-iotest"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#beforeeachiotest-iotest-iotest"}},[t._v("#")]),t._v(" beforeEachIOTest(IOTest ioTest)")]),t._v(" "),s("h3",{attrs:{id:"beforeeachtestclass-testclass-testclass"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#beforeeachtestclass-testclass-testclass"}},[t._v("#")]),t._v(" beforeEachTestClass(TestClass testClass)")]),t._v(" "),s("h2",{attrs:{id:"after"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#after"}},[t._v("#")]),t._v(" After")]),t._v(" "),s("p",[t._v("Useful "),s("code",[t._v("after")]),t._v(" methods that could be overridden within you own "),s("code",[t._v("Reporter")]),t._v(" class.")]),t._v(" "),s("h3",{attrs:{id:"afterboot"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#afterboot"}},[t._v("#")]),t._v(" afterBoot()")]),t._v(" "),s("h3",{attrs:{id:"aftertest"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aftertest"}},[t._v("#")]),t._v(" afterTest()")]),t._v(" "),s("h3",{attrs:{id:"afteriotest"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#afteriotest"}},[t._v("#")]),t._v(" afterIOTest()")]),t._v(" "),s("h3",{attrs:{id:"aftereachassertion-assertion-assertion"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aftereachassertion-assertion-assertion"}},[t._v("#")]),t._v(" afterEachAssertion(Assertion assertion)")]),t._v(" "),s("h3",{attrs:{id:"aftereachpassedassertion-assertion-assertion"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aftereachpassedassertion-assertion-assertion"}},[t._v("#")]),t._v(" afterEachPassedAssertion(Assertion assertion)")]),t._v(" "),s("h3",{attrs:{id:"aftereachfailedassertion-assertion-assertion"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aftereachfailedassertion-assertion-assertion"}},[t._v("#")]),t._v(" afterEachFailedAssertion(Assertion assertion)")]),t._v(" "),s("h3",{attrs:{id:"aftereachtest-test-test"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aftereachtest-test-test"}},[t._v("#")]),t._v(" afterEachTest(Test test)")]),t._v(" "),s("h3",{attrs:{id:"aftereachpassedtest-test-test"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aftereachpassedtest-test-test"}},[t._v("#")]),t._v(" afterEachPassedTest(Test test)")]),t._v(" "),s("h3",{attrs:{id:"aftereachfailedtest-test-test"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aftereachfailedtest-test-test"}},[t._v("#")]),t._v(" afterEachFailedTest(Test test)")]),t._v(" "),s("h3",{attrs:{id:"aftereachskippedtest-test-test"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aftereachskippedtest-test-test"}},[t._v("#")]),t._v(" afterEachSkippedTest(Test test)")]),t._v(" "),s("h3",{attrs:{id:"aftereachincompletetest-test-test"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aftereachincompletetest-test-test"}},[t._v("#")]),t._v(" afterEachIncompleteTest(Test test)")]),t._v(" "),s("h3",{attrs:{id:"aftereachiotest-iotest-iotest"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aftereachiotest-iotest-iotest"}},[t._v("#")]),t._v(" afterEachIOTest(IOTest ioTest)")]),t._v(" "),s("h3",{attrs:{id:"aftereachpassediotest-iotest-iotest"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aftereachpassediotest-iotest-iotest"}},[t._v("#")]),t._v(" afterEachPassedIOTest(IOTest ioTest)")]),t._v(" "),s("h3",{attrs:{id:"aftereachfailediotest-iotest-iotest"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aftereachfailediotest-iotest-iotest"}},[t._v("#")]),t._v(" afterEachFailedIOTest(IOTest ioTest)")]),t._v(" "),s("h3",{attrs:{id:"aftereachiotestwithoutresults-iotest-iotest"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aftereachiotestwithoutresults-iotest-iotest"}},[t._v("#")]),t._v(" afterEachIOTestWithoutResults(IOTest ioTest)")]),t._v(" "),s("h3",{attrs:{id:"aftereachtestclass-testclass-testclass"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aftereachtestclass-testclass-testclass"}},[t._v("#")]),t._v(" afterEachTestClass(TestClass testClass)")]),t._v(" "),s("h3",{attrs:{id:"aftereachpassestestclass-testclass-testclass"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aftereachpassestestclass-testclass-testclass"}},[t._v("#")]),t._v(" afterEachPassesTestClass(TestClass testClass)")]),t._v(" "),s("h3",{attrs:{id:"aftereachfailedtestclass-testclass-testclass"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aftereachfailedtestclass-testclass-testclass"}},[t._v("#")]),t._v(" afterEachFailedTestClass(TestClass testClass)")])])}),[],!1,null,null,null);e.default=r.exports}}]);