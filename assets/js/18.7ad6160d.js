(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{218:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"writing-io-tests"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#writing-io-tests"}},[t._v("#")]),t._v(" Writing IO tests")]),t._v(" "),a("p",[t._v("Another way we can write tests with Counsel is using Input/Output (IO) tests. The example will show basic conventions and steps for writing IO tests with Counsel:")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("IO tests are written in yaml files.")])]),t._v(" "),a("li",[a("p",[t._v("IO test file names need to end with *Test.yaml.")])]),t._v(" "),a("li",[a("p",[t._v("The most basic IO test will require the following fields:")])])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("test")]),t._v(" - a short description about what you want to test")]),t._v(" "),a("li",[a("code",[t._v("perform")]),t._v(" - the input, command to run")]),t._v(" "),a("li",[a("code",[t._v("expect")]),t._v(" - what should be the output")])]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("Optional fields for an IO test:")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("cwd")]),t._v(" - specify the current working directory the test")]),t._v(" "),a("li",[a("code",[t._v("platform")]),t._v(" - specify one or more platforms within this test should run")]),t._v(" "),a("li",[a("code",[t._v("skip")]),t._v(" - mark the IO test as skipped")]),t._v(" "),a("li",[a("code",[t._v("assertions")]),t._v(" - specify basic true/false expectations")])]),t._v(" "),a("h2",{attrs:{id:"example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("p",[t._v("Example 2.1 - Testing the famous "),a("code",[t._v("ls")]),t._v(" command with Counsel.")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v('\n  "ls" command test')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cwd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" tests/doubles/ls"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("dir\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("perform")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v("\n  ls")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("expect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v("\n  bar.txt\n  baz.txt\n  foo.txt\n  sub-1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("assertions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("status")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),a("h2",{attrs:{id:"real-world-counsel-io-test-example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#real-world-counsel-io-test-example"}},[t._v("#")]),t._v(" Real-world Counsel IO test example")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  Dot reporter error true and false output\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("perform")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  src/counsel.js "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("config dot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("reporter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("true"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("reporting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("test.js "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("is"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("test\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("expect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v("\n  Counsel {{version}}")]),t._v("\n\n  xx                        2 / 2 (100%)\n\n  x 1) CoreAssertionsTest "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" it_is_able_to_assert_true\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("tests/dot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("reporter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("true"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("test/CoreAssertionsTest.js"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n\n  5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  6"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("         this.assertTrue(false);\n  7"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  Value is not truthy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("false")]),t._v("\n\n  x 2) CoreAssertionsTest "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" it_is_able_to_assert_false\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("tests/dot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("reporter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("true"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("test/CoreAssertionsTest.js"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("\n\n  11"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  12"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("         this.assertFalse(true);\n  13"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  Value is not falsy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("executionTimeFormatted"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  2 failed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 2 tests\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("assertions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("status")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("assertionsCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("assertionsFailuresCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("assertionsPassesCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("testsCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("testsFailuresCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("testsPassesCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("progress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);